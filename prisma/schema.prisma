
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String 
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  firstName    String?
  lastName     String?
  profilePic         String?
  password      String?
  role UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]

  orders        Order[]
  reviews       Review[]
  cart          Cart?
  products Product[]

  @@map("users")
}


model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  images Image[]
  videos Video[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  options Option[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  avaiavility Avaiavility @default(OUT_OF_STOCK)
  shippingTime String @default("7-10 business days")
  cartItems   CartItem[]
  reviews Review[]
  userId String
  user User @relation(fields: [userId], references: [id])
}

enum Avaiavility {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
}


model Option {
  id String @id @default(cuid())
  name String
  description String?
  product Product @relation(fields: [productId], references: [id])
  productId String
  inStock Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(cuid())
  url String
  description String?
  isMain Boolean @default(false)
  product Product @relation(fields: [productId], references: [id])
  productId String
}

model Video {
  id String @id @default(cuid())
  url String
  description String?
  product Product @relation(fields: [productId], references: [id])
  productId String
}
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  status     String      @default("pending")
  total      Decimal     @db.Decimal(10, 2)
  items      OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Analytics {
  id String @id @default(cuid())
  loggedIn Boolean @default(false)
  referrer String?
  userAgent String?
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(cuid())
  product Product @relation(fields: [productId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  productId String
  rating Int
  review String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}